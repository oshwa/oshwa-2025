{"version":3,"file":"component---src-pages-resources-js-400b57c9afc39232da7f.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/GridCards.js","webpack://gatsby-starter-default/./src/pages/resources.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport dayjs from 'dayjs';\n\nconst GridCards = ({ items, listType }) => {\n  return (\n    <>\n      <div className={listType === 'resources-ref' ? `list` : `list`}>\n        <div className=\"grid lg:grid-cols-4 md:grid-cols-4 gap-4\">\n          {items &&\n            items.map(\n              (item, idx) => (\n                // item.prettyUrl && (\n                <Link\n                  key={`${item.prettyUrl}-${idx}`}\n                  to={\n                    listType === 'resources'\n                      ? `/resources/${item.prettyUrl}`\n                      : `/resources/${item.prettyUrl}`\n                  }\n                  className=\"lg:col-span-1 md:col-span-2 sm:col-span-4 notched notched--border notched--border--hover list-item\"\n                >\n                  <div>\n                    {/* {item.origin && (item.origin)} */}\n                    {listType === 'blog-post' && (\n                      <p className=\"publicationDate publicationDate--blog\">\n                        {dayjs(item.date).format('MMMM D, YYYY')}\n                      </p>\n                    )}\n                    <p className=\"title\"> {item.title}</p>\n                  </div>\n                  {(listType === 'resources' ||\n                    listType === 'resources-ref') && (\n                      <>\n                        <p className=\"title\">{item.resourceTitle}</p>\n                        <p className=\"type\">{item.resourceType}</p>\n                      </>\n                    )}\n                </Link>\n              )\n              // )\n            )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default GridCards;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Layout from '../components/layout';\nimport { FilterBar } from '../components/FilterBar';\nimport GridCards from '../components/GridCards';\nconst sessionsName = 'resource-filters';\n\nconst Search = ({ location }) => {\n  const [query, setQuery] = useState(``);\n  const [results, setResults] = useState([]);\n  const contentfulType = 'ContentfulGlobalResourceContainer';\n\n  const capFirstLet = str => {\n    if (str) {\n      return str[0].toUpperCase() + str.slice(1);\n    }\n  };\n\n  const formatAudienceQuery = audienceQuery => {\n    if (audienceQuery === 'Academic') {\n      return 'Academic -Non-academic';\n    } else {\n      return audienceQuery;\n    }\n  };\n\n  const formatQuery = ({\n    resourceDate = '',\n    resourceType = '',\n    resourceAudience = '',\n    contentfulType = '',\n  }) => {\n    let resourceDateQuery = resourceDate && resourceDate !== '*' ? `+resourceDate:${resourceDate}` : '';\n    let resourceTypeQuery =\n      resourceType && resourceType !== '*'\n        ? `+resourceType:${resourceType.split(' ').join(' +')}`\n        : '';\n    let resourceAudienceQuery = resourceAudience && resourceAudience !== '*' ? `+resourceAudience:${resourceAudience}` : '';\n    let contentfulTypeQuery = `+contentfulType:${contentfulType}`;\n\n    return `\n      ${resourceDateQuery}\n      ${resourceTypeQuery}\n      ${resourceAudienceQuery}\n      ${contentfulTypeQuery}\n    `;\n  };\n\n  const handleSearchQuery = () => {\n    let pubDateSelect = document.querySelector('#publicationDate');\n    let pubTypeSelect = document.querySelector('#publicationType');\n    let pubAudienceSelect = document.querySelector('#publicationAudience');\n\n    let pubDateValue = pubDateSelect.value;\n    let pubTypeValue = pubTypeSelect.value;\n    let pubAudienceValue = pubAudienceSelect.value;\n\n    sessionStorage.setItem(\n      sessionsName,\n      JSON.stringify({ pubDateValue, pubTypeValue, pubAudienceValue })\n    );\n\n    const formattedQuery = formatQuery({\n      resourceDate: pubDateValue,\n      resourceType: pubTypeValue,\n      resourceAudience: formatAudienceQuery(pubAudienceValue),\n      contentfulType,\n    });\n\n    setQuery(formattedQuery);\n  };\n\n  const handleUrlParams = useCallback(() => {\n    let pubDateParam = new URLSearchParams(location.search).get('year') || '*';\n    let pubTypeParam = new URLSearchParams(location.search).get('type') || '*';\n    let pubAudienceParam =\n      new URLSearchParams(location.search).get('audience') || '*';\n\n    setPubDateQuery(pubDateParam);\n    setPubTypeQuery(capFirstLet(pubTypeParam));\n    setPubAudienceQuery(capFirstLet(pubAudienceParam));\n\n    const formattedQuery = formatQuery({\n      resourceDate: pubDateParam,\n      resourceType: pubTypeParam,\n      resourceAudience: formatAudienceQuery(pubAudienceParam),\n      contentfulType,\n    });\n\n    setQuery(formattedQuery);\n  }, [location]);\n\n  const setPubDateQuery = paramVal => {\n    let pubDateSelect = document.querySelector('#publicationDate');\n    Array.from(pubDateSelect.options).forEach((option, idx) => {\n      if (option.value === paramVal) {\n        pubDateSelect.selectedIndex = idx;\n      }\n    });\n  };\n\n  const setPubTypeQuery = paramVal => {\n    let pubTypeSelect = document.querySelector('#publicationType');\n    Array.from(pubTypeSelect.options).forEach((option, idx) => {\n      if (option.value === paramVal) {\n        pubTypeSelect.selectedIndex = idx;\n      }\n    });\n  };\n\n  const setPubAudienceQuery = paramVal => {\n    let pubAudienceSelect = document.querySelector('#publicationAudience');\n    Array.from(pubAudienceSelect.options).forEach((option, idx) => {\n      if (option.value === paramVal) {\n        pubAudienceSelect.selectedIndex = idx;\n      }\n    });\n  };\n\n  const matchFiltersToSessions = useCallback(() => {\n    let pubDateSelect = document.querySelector('#publicationDate');\n    let pubTypeSelect = document.querySelector('#publicationType');\n    let pubAudienceSelect = document.querySelector('#publicationAudience');\n    let savedSessionsQuery = JSON.parse(sessionStorage.getItem(sessionsName));\n\n    // set date filter to sessions\n    if (savedSessionsQuery && savedSessionsQuery.pubDateValue) {\n      setPubDateQuery(savedSessionsQuery.pubDateValue);\n    }\n\n    // set type filter to sessions\n    if (savedSessionsQuery && savedSessionsQuery.pubTypeValue) {\n      setPubTypeQuery(savedSessionsQuery.pubTypeValue);\n    }\n\n    // set audience filter to sessions\n    if (savedSessionsQuery && savedSessionsQuery.pubAudienceValue) {\n      setPubAudienceQuery(savedSessionsQuery.pubAudienceValue);\n    }\n\n    const formattedQuery = formatQuery({\n      title: '*',\n      resourceDate: pubDateSelect.value,\n      resourceType: pubTypeSelect.value,\n      resourceAudience: formatAudienceQuery(pubAudienceSelect.value),\n      contentfulType,\n    });\n\n    setQuery(formattedQuery);\n  }, []);\n\n  const clearFilters = () => {\n    sessionStorage.removeItem(sessionsName);\n    document.querySelector('#publicationDate').selectedIndex = 0;\n    document.querySelector('#publicationType').selectedIndex = 0;\n    document.querySelector('#publicationAudience').selectedIndex = 0;\n    location.search = '';\n\n    setQuery(\n      formatQuery({\n        resourceDate: '*',\n        resourceType: '*',\n        resourceAudience: '*',\n        contentfulType: contentfulType\n      }));\n  };\n\n  // const sortResultsByReportDateDesc = results => {\n  //   return results.sort(\n  //     (a, b) => new Date(b.resourceDate) - new Date(a.resourceDate)\n  //   );\n  // };\n\n  const sortResults = results => {\n    return results.sort((a, b) => {\n      // Prioritize OSHWA first\n      const originOrder = (b.origin === 'OSHWA') - (a.origin === 'OSHWA');\n      if (originOrder !== 0) return originOrder;\n\n      return a.title.localeCompare(b.title);\n    });\n  };\n\n  useEffect(() => {\n    const lunrIndex = window.__LUNR__['en'];\n\n    handleUrlParams();\n    matchFiltersToSessions();\n    const searchResults = lunrIndex.index.search(query);\n\n    const searchResultsMapped = searchResults.map(({ ref }) => {\n      return lunrIndex.store[ref];\n    });\n    setResults(sortResults(searchResultsMapped));\n  }, [query, location, handleUrlParams, matchFiltersToSessions]);\n\n  return (\n    <>\n      <Layout>\n        <>\n          <div className=\"px-8\">\n            <div className=\"grid lg:grid-cols-5 md:grid-cols-5\">\n              <div className=\"col-span-10 mb-5 notched notched--border\">\n                <h1 className=\"generic-heading-1\">Resources</h1>\n              </div>\n              {/* <div>{sessionStorage.getItem('resource-filters')}</div> */}\n            </div>\n          </div>\n\n          <FilterBar\n            handleSearchQuery={handleSearchQuery}\n            handleClearFilters={clearFilters}\n            listType=\"resources\"\n          />\n          <div className=\"resource-cards-wrapper px-8 py-4\">\n            <GridCards items={results} listType=\"resources\" />\n          </div>\n        </>\n      </Layout>\n    </>\n  );\n};\n\nexport default Search;\n"],"names":["_ref","items","listType","React","className","map","item","idx","Link","key","prettyUrl","to","dayjs","date","format","title","resourceTitle","resourceType","sessionsName","location","query","setQuery","useState","results","setResults","contentfulType","capFirstLet","str","toUpperCase","slice","formatAudienceQuery","audienceQuery","formatQuery","_ref2","resourceDate","resourceAudience","split","join","handleUrlParams","useCallback","pubDateParam","URLSearchParams","search","get","pubTypeParam","pubAudienceParam","setPubDateQuery","setPubTypeQuery","setPubAudienceQuery","formattedQuery","paramVal","pubDateSelect","document","querySelector","Array","from","options","forEach","option","value","selectedIndex","pubTypeSelect","pubAudienceSelect","matchFiltersToSessions","savedSessionsQuery","JSON","parse","sessionStorage","getItem","pubDateValue","pubTypeValue","pubAudienceValue","useEffect","lunrIndex","window","__LUNR__","searchResultsMapped","index","_ref3","ref","store","sort","a","b","originOrder","origin","localeCompare","sortResults","Layout","FilterBar","handleSearchQuery","setItem","stringify","handleClearFilters","clearFilters","removeItem","GridCards"],"sourceRoot":""}