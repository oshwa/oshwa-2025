{"version":3,"file":"component---src-templates-global-resource-js-ad4ee379b78be2eea50f.js","mappings":"mLAEO,MAAMA,EAAQC,IAA8C,IAA7C,MAAEC,EAAK,cAAEC,EAAa,QAAEC,EAAO,KAAEC,GAAMJ,EAC3D,OACEK,EAAAA,cAAA,OAAKC,UAAW,oCAAoCF,KAClDC,EAAAA,cAAA,MAAIC,UAAU,0BAA0BL,GACxCI,EAAAA,cAAA,OAAKC,UAAU,0BACbD,EAAAA,cAAA,UACEE,IAAK,iCAAiCJ,IACtCF,MAAOA,EACPO,MAAM,0EAENC,sBAAsB,OACtBC,mBAAmB,OACnBC,iBAAe,KAGnBN,EAAAA,cAAA,MAAIC,UAAU,0BAA0BJ,GACpC,EAIV,K,gHCZA,MAReF,IAAkD,IAAjD,KAAEY,EAAI,QAAEC,EAAO,QAAEC,EAAO,gBAAEC,GAAiBf,EACzD,OACEK,EAAAA,cAAA,UAAQC,UAAW,OAAOS,IAAmB,eAAcF,EAASG,QAASF,GAC1EF,EACM,ECmBb,MAtBuBZ,IAA8C,IAA7C,UAAEiB,EAAS,QAAEH,EAAO,gBAAEI,GAAiBlB,EAC7D,OACEK,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAU,2BACZW,EAAUE,KAAI,CAACC,EAAUC,IAEtBhB,EAAAA,cAACiB,EAAM,CACLP,gBAAiB,sBACfG,IAAoBE,EAASA,SAAW,WAAa,IAEvDG,IAAK,UAAUH,KAAYC,IAC3BT,KAAMQ,EAASI,gBACfX,QAASO,EAASA,SAClBN,QAASA,OAKhB,E,oBCXQ,SAASW,EAAkBzB,GAAsB,IAArB,KAAE0B,EAAI,SAAEC,GAAU3B,EAC3D,MAAM4B,EAAkB,WAEjBC,EAAkBC,IAAuBC,EAAAA,EAAAA,UAASH,GAYnDI,GAAkBC,EAAAA,EAAAA,cAAY,KAClC,IAAIC,EAAsB,IAAIC,gBAAgBR,EAASS,QAAQC,IAC7D,YAEFP,EATkBQ,KAClB,GAAIA,EACF,OAAOA,EAAI,GAAGC,cAAgBD,EAAIE,MAAM,EAC1C,EAMoBC,CAAYP,IAAwBN,EAAgB,GACvE,CAACD,IACEe,EAAgBhB,EAAKiB,kCAErBC,EACJlB,EAAKiB,kCAAkCE,oBAAoBC,QACzDC,GAAYA,EAAS3B,WAAaS,IAClC,GAEEmB,EACJtB,EAAKiB,kCAAkCE,oBAAoB1B,KAAIN,IAAO,CACpEO,SAAUP,EAAQO,SAClBI,gBAAiBX,EAAQW,oBAO7B,OAJAyB,EAAAA,EAAAA,YAAU,KACRjB,GAAiB,GAChB,CAACA,IAGF3B,EAAAA,cAAC6C,EAAAA,EAAM,KACL7C,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKC,UAAU,QACbD,EAAAA,cAAC8C,EAAc,CACblC,UAAW+B,EACXlC,QAvCmBsC,IAC3B,MAAMC,EAAOD,EAAEE,cAAcC,aAAa,iBAAmB,UAC7DzB,EAAoBuB,EAAK,EAsCjBnC,gBAAiBW,IAGnBxB,EAAAA,cAAA,OAAKC,UAAU,qCACbD,EAAAA,cAAA,OAAKC,UAAU,8EACbD,EAAAA,cAAA,MAAIC,UAAU,0BACXsC,EAAkB3C,OAEpB2C,EAAkBY,UACjBnD,EAAAA,cAAA,MAAIC,UAAU,6BACXsC,EAAkBY,UAGtBd,EAAce,cACbf,EAAce,aAAaA,cACzBpD,EAAAA,cAAA,KAAGC,UAAU,kCACVoC,EAAce,aAAaA,cAIjCb,EAAkBc,iBAAiBA,kBAClCrD,EAAAA,cAAA,OAAKC,UAAU,yBACbD,EAAAA,cAACsD,EAAAA,EAAY,CACX9C,QACE+B,EAAkBc,iBAAiBE,oBAChCC,SAMbxD,EAAAA,cAAA,OAAKC,UAAU,oHACZoC,EAAcoB,eACbzD,EAAAA,cAAC0D,EAAAA,EAAW,CACVC,OAAOC,EAAAA,EAAAA,GAASvB,EAAcoB,eAC9BI,IAAI,kBAkBd7D,EAAAA,cAAA,OAAKC,UAAU,YACbD,EAAAA,cAAA,OAAKC,UAAU,sCACbD,EAAAA,cAAA,OAAKC,UAAU,gCACZoB,EAAKiB,kCAAkCwB,WACtC9D,EAAAA,cAACN,EAAAA,EAAK,CACJI,QAASuB,EAAKiB,kCAAkCwB,UAChD/D,KAAK,UAGRwC,EAAkBwB,MACjB/D,EAAAA,cAACgE,EAAAA,EAAQ,CAACxD,QAAS+B,EAAkBwB,QAGxCxB,EAAkB0B,WACjBjE,EAAAA,cAAA,OAAKC,UAAU,8DACbD,EAAAA,cAAA,KACEkE,KAAM3B,EAAkB0B,UACxBhE,UAAU,8CAETsC,EAAkB4B,eAKtB,KAIf,C","sources":["webpack://gatsby-starter-default/./src/components/Video.js","webpack://gatsby-starter-default/./src/components/Button.js","webpack://gatsby-starter-default/./src/components/LanguagePicker.js","webpack://gatsby-starter-default/./src/templates/global-resource.js"],"sourcesContent":["import React from 'react';\n\nexport const Video = ({ title, resourceTitle, videoId, size }) => {\n  return (\n    <div className={`video-container video-container--${size}`}>\n      <h4 className='video-container__title'>{title}</h4>\n      <div className=\"video-container__video\">\n        <iframe\n          src={`https://www.youtube.com/embed/${videoId}`}\n          title={title}\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          // frameBorder=\"0\"\n          webkitallowfullscreen=\"true\"\n          mozallowfullscreen=\"true\"\n          allowFullScreen\n        />\n      </div>\n      <h4 className='video-container__title'>{resourceTitle}</h4>\n    </div>\n  );\n};\n\nexport default Video;","import React from 'react';\n\nconst Button = ({ text, content, handler, additionalClass }) => {\n  return (\n    <button className={`btn ${additionalClass}`} data-content={content} onClick={handler}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nconst LanguagePicker = ({ languages, handler, currentLanguage }) => {\n  return (\n    <>\n      <div className=\"language-picker-wrapper\">\n        {languages.map((language, idx) => {\n          return (\n            <Button\n              additionalClass={`language-selector ${\n                currentLanguage === language.language ? 'selected' : ''\n              }`}\n              key={`button-${language}-${idx}`}\n              text={language.languageDisplay}\n              content={language.language}\n              handler={handler}\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default LanguagePicker;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport Layout from '../components/layout';\n// import FixedNav from '../components/FixedNav';\nimport RichText from '../components/RichText';\nimport LanguagePicker from '../components/LanguagePicker';\nimport Video from '../components/Video';\nimport MarkdownText from '../components/MarkdownText';\n\nexport default function GlobalResourcePage({ data, location }) {\n  const defaultLanguage = 'English';\n\n  const [selectedLanguage, setSelectedLanguage] = useState(defaultLanguage);\n\n  const handleLanguageSelect = e => {\n    const lang = e.currentTarget.getAttribute('data-content') || 'English';\n    setSelectedLanguage(lang);\n  };\n\n  const capFirstLet = str => {\n    if (str) {\n      return str[0].toUpperCase() + str.slice(1);\n    }\n  };\n  const handleUrlParams = useCallback(() => {\n    let languageSearchValue = new URLSearchParams(location.search).get(\n      'language'\n    );\n    setSelectedLanguage(capFirstLet(languageSearchValue) || defaultLanguage);\n  }, [location]);\n  const globalContent = data.contentfulGlobalResourceContainer;\n\n  const translatedContent =\n    data.contentfulGlobalResourceContainer.translatedResources.filter(\n      resource => resource.language === selectedLanguage\n    )[0];\n\n  const availableLanguages =\n    data.contentfulGlobalResourceContainer.translatedResources.map(content => ({\n      language: content.language,\n      languageDisplay: content.languageDisplay,\n    }));\n\n  useEffect(() => {\n    handleUrlParams();\n  }, [handleUrlParams]);\n\n  return (\n    <Layout>\n      <>\n        <div className=\"px-8\">\n          <LanguagePicker\n            languages={availableLanguages}\n            handler={handleLanguageSelect}\n            currentLanguage={selectedLanguage}\n          />\n\n          <div className=\"grid grid-cols-12 resource-header\">\n            <div className=\"resource-header__title-wrapper lg:col-span-7 md:col-span-12 sm:col-span-12\">\n              <h1 className=\"resource-header__title\">\n                {translatedContent.title}\n              </h1>\n              {translatedContent.subtitle && (\n                <h2 className=\"resource-header__subtitle\">\n                  {translatedContent.subtitle}\n                </h2>\n              )}\n              {globalContent.namedAuthors &&\n                globalContent.namedAuthors.namedAuthors && (\n                  <p className=\"resource-header__named_authors\">\n                    {globalContent.namedAuthors.namedAuthors}\n                  </p>\n                )}\n\n              {translatedContent.shortDescription.shortDescription && (\n                <div className=\"resource-introduction\">\n                  <MarkdownText\n                    content={\n                      translatedContent.shortDescription.childMarkdownRemark\n                        .html\n                    }\n                  />\n                </div>\n              )}\n            </div>\n            <div className=\"resource-header__image lg:col-span-4 lg:col-start-9 md:col-span-12 md:col-start-1  sm:col-span-12 sm:col-start-1\">\n              {globalContent.resourceImage && (\n                <GatsbyImage\n                  image={getImage(globalContent.resourceImage)}\n                  alt=\"blog image\"\n                />\n              )}\n            </div>\n          </div>\n        </div>\n        {/* {% if page.fixed_nav %}\n            {% include components/fixed-nav.html %}\n          {% endif %} */}\n        {/* {translatedContent.fixedNav && (\n          <FixedNav\n            toc={\n              translatedContent.markdownBody.childrenMarkdownRemark[0]\n                .tableOfContents\n            }\n            content={translatedContent.body}\n          />\n        )}  */}\n        <div className=\"p-8 pb-5\">\n          <div className=\"grid lg:grid-cols-12 resource-body\">\n            <div className=\"lg:col-span-7 md:col-span-12\">\n              {data.contentfulGlobalResourceContainer.youTubeId && (\n                <Video\n                  videoId={data.contentfulGlobalResourceContainer.youTubeId}\n                  size=\"large\"\n                />\n              )}\n              {translatedContent.body && (\n                <RichText content={translatedContent.body} />\n              )}\n            </div>\n            {translatedContent.buttonUrl && (\n              <div className=\"lg:col-span-4 lg:col-start-9 md:col-span-12 md:col-start-1\">\n                <a\n                  href={translatedContent.buttonUrl}\n                  className=\"link link--notched notched notched--border\"\n                >\n                  {translatedContent.buttonText}\n                </a>\n              </div>\n            )}\n          </div>\n        </div>{' '}\n      </>\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query ($id: String!) {\n    contentfulGlobalResourceContainer(id: { eq: $id }) {\n      id\n      resourceTitle\n      prettyUrl\n      youTubeId\n      resourceType\n      resourceDate\n      resourceAudience\n      namedAuthors {\n        namedAuthors\n      }\n      resourceImage {\n        id\n        gatsbyImageData\n      }\n      translatedResources {\n        id\n        title\n        subtitle\n        language\n        languageDisplay\n        body {\n          raw\n          references {\n            __typename\n            ... on ContentfulFigure {\n              contentful_id\n              title\n              image {\n                id\n                gatsbyImageData\n              }\n              caption {\n                id\n                childMarkdownRemark {\n                  id\n                  html\n                }\n              }\n            }\n            ... on ContentfulButton {\n              contentful_id\n              __typename\n              id\n              buttonText\n              buttonUrl\n              sys {\n                contentType {\n                  sys {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n        shortDescription {\n          shortDescription\n          childMarkdownRemark {\n            html\n          }\n        }\n        buttonUrl\n        buttonText\n      }\n    }\n  }\n`;\n"],"names":["Video","_ref","title","resourceTitle","videoId","size","React","className","src","allow","webkitallowfullscreen","mozallowfullscreen","allowFullScreen","text","content","handler","additionalClass","onClick","languages","currentLanguage","map","language","idx","Button","key","languageDisplay","GlobalResourcePage","data","location","defaultLanguage","selectedLanguage","setSelectedLanguage","useState","handleUrlParams","useCallback","languageSearchValue","URLSearchParams","search","get","str","toUpperCase","slice","capFirstLet","globalContent","contentfulGlobalResourceContainer","translatedContent","translatedResources","filter","resource","availableLanguages","useEffect","Layout","LanguagePicker","e","lang","currentTarget","getAttribute","subtitle","namedAuthors","shortDescription","MarkdownText","childMarkdownRemark","html","resourceImage","GatsbyImage","image","getImage","alt","youTubeId","body","RichText","buttonUrl","href","buttonText"],"sourceRoot":""}